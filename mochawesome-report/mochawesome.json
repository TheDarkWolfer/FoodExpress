{
  "stats": {
    "suites": 2,
    "tests": 22,
    "passes": 22,
    "pending": 0,
    "failures": 0,
    "start": "2025-10-23T11:16:16.555Z",
    "end": "2025-10-23T11:16:22.262Z",
    "duration": 5707,
    "testsRegistered": 22,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "02f5aae7-d75c-4650-8e63-dbb7cc30efbe",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "aa132f98-fb17-43b0-91c0-5cdfe2ec3b09",
          "title": "RESTAURANT router",
          "fullFile": "/home/camille/Documents/PROJECTS-SupInfo/FoodExpress/test/restaurants-test.js",
          "file": "/test/restaurants-test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"RESTAURANT router\"",
              "fullTitle": "RESTAURANT router \"before all\" hook in \"RESTAURANT router\"",
              "timedOut": false,
              "duration": 804,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const _res = await supertest(app)\n.post(\"/restaurants\")\n.set(\"Authorization\",`Bearer ${adminToken}`)\n.send({\n  name:\"Outer Expanse\",\n  address:\"Past the Farm Arrays\",\n  phone:\"77777777\",\n  opening_hours:\"Every Cycle\"\n})\n.expect(201) // Devrait pas poser problème, mais on sais jamais\nID4l8r = _res.body._id // on prépare une variable pour stocker l'ID qu'on va secouer un peu pour les tests\nrestaurantsIDs.push(ID4l8r) // On prévois de nettoyer après les tests, quand même",
              "err": {},
              "uuid": "4dab1794-c3c0-462f-a92a-c9d5b78ec12f",
              "parentUUID": "aa132f98-fb17-43b0-91c0-5cdfe2ec3b09",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"RESTAURANT router\"",
              "fullTitle": "RESTAURANT router \"after all\" hook in \"RESTAURANT router\"",
              "timedOut": false,
              "duration": 58,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "for (let i = 0; i < restaurantsIDs.length; i++) {\nconst gettingDeleted = restaurantsIDs[i];\nawait supertest(app).delete(`/restaurants/${gettingDeleted}`).set(\"Authorization\",`Bearer ${adminToken}`)\nconsole.log(`Restaurant with ID <${gettingDeleted}> got deleted !`)\n}",
              "err": {},
              "uuid": "5d2589de-2e94-42b4-9b57-eeeb09240e53",
              "parentUUID": "aa132f98-fb17-43b0-91c0-5cdfe2ec3b09",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "GET /restaurants sans token -> Réussite et affichage des restaurants",
              "fullTitle": "RESTAURANT router GET /restaurants sans token -> Réussite et affichage des restaurants",
              "timedOut": false,
              "duration": 107,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const simpleGET = await supertest(app)\n.get(\"/restaurants\")\n.expect(200)\n.then((res) => {\n})",
              "err": {},
              "uuid": "90aec982-3211-490d-8460-06260edce63d",
              "parentUUID": "aa132f98-fb17-43b0-91c0-5cdfe2ec3b09",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /restaurants sans token -> Erreur 401",
              "fullTitle": "RESTAURANT router POST /restaurants sans token -> Erreur 401",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const designedToFail = await supertest(app)\n.post(\"/restaurants\")\n.send({\n  name:\"The Restaurant of Failure\",\n  address:\"401 Error Avenue, FailCity\",\n  phone:\"401000000\",\n  opening_hours:\"From 4:01am to 4:01pm\"\n})\n.expect(401)\n.then((res)=> {expect(res.body).to.have.property('error') // On s'assure d'avoir un message en plus du code d'erreur\n})",
              "err": {},
              "uuid": "cc950e08-5536-4451-9263-9b343a05ea8a",
              "parentUUID": "aa132f98-fb17-43b0-91c0-5cdfe2ec3b09",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /restaurants avec token utilisateur -> Erreur 403, mais cette fois c'est un problème de rôle",
              "fullTitle": "RESTAURANT router POST /restaurants avec token utilisateur -> Erreur 403, mais cette fois c'est un problème de rôle",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const designedToFailButDifferently = await supertest(app) \n.post(\"/restaurants\")\n.set(\"Authorization\",`Bearer ${userToken}`)\n.send({\n  name:\"The Restaurant of Failure 2 Electric boogaloo\",\n  address:\"403 Error Avenue, FailCity\",\n  phone:\"403000000\",\n  opening_hours:\"From 4:03am to 4:03pm\"\n})\n.expect(403)",
              "err": {},
              "uuid": "05ab2dd8-4ffe-42cd-9e82-ede04f56385f",
              "parentUUID": "aa132f98-fb17-43b0-91c0-5cdfe2ec3b09",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /restaurants avec token admin -> Création d'un nouveau restaurant",
              "fullTitle": "RESTAURANT router POST /restaurants avec token admin -> Création d'un nouveau restaurant",
              "timedOut": false,
              "duration": 62,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const designedToSucceed = await supertest(app)\n.post(\"/restaurants\")\n.set(\"Authorization\",`Bearer ${adminToken}`)\n.send({\n  name:\"The Restaurant of Success\",\n  address:\"200 Success Street, GoodCity\",\n  phone:\"200200200\",\n  opening_hours:\"From 2:00am to 2:00am\"\n})\n.expect(201)",
              "err": {},
              "uuid": "0bca40bf-7118-4112-b782-952fdd0869b5",
              "parentUUID": "aa132f98-fb17-43b0-91c0-5cdfe2ec3b09",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /restaurants avec un token valide mais des données invalides -> Erreur 400",
              "fullTitle": "RESTAURANT router POST /restaurants avec un token valide mais des données invalides -> Erreur 400",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const willFailAgain = await supertest(app)\n.post(\"/restaurants\")\n.set(\"Authorization\",`Bearer ${adminToken}`)\n.send({\n  name:new Set(),\n  address:NaN,\n  phone:undefined\n  // Pas d'horaires, histoire de vraiment tout faire comme il faut pas :p\n})\n.expect(400)\n.then((res) => {\n  // On s'assure de bien avoir une erreur de validation\n  expect(res.body).to.have.property('message').that.equals(\"Validation error\")\n})",
              "err": {},
              "uuid": "bd9a5b4b-4894-474c-8d69-e424df80442d",
              "parentUUID": "aa132f98-fb17-43b0-91c0-5cdfe2ec3b09",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PATCH /restaurants sans token valide -> Erreur 401",
              "fullTitle": "RESTAURANT router PATCH /restaurants sans token valide -> Erreur 401",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const patch2Fail = await supertest(app)\n.patch(`/restaurants/${ID4l8r}`)\n.send({\n  name:\"Subterranean\"\n})\n.expect(401)\n.then((res)=>{\n  expect(res.body).to.have.property('error').that.equals('Missing or invalid Authorization header')\n})",
              "err": {},
              "uuid": "65d76412-2a1e-4319-853d-62d819c9499d",
              "parentUUID": "aa132f98-fb17-43b0-91c0-5cdfe2ec3b09",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PATCH /restaurants avec un token utilisateur.ice -> Erreur 403",
              "fullTitle": "RESTAURANT router PATCH /restaurants avec un token utilisateur.ice -> Erreur 403",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const otherPatch2Fail = await supertest(app)\n.patch(`/restaurants/${ID4l8r}`)\n.set(\"Authorization\",`Bearer ${userToken}`)\n.send({\n  name:\"Metropolis\"\n})\n.expect(403)\n.then((res) => {\n  expect(res.body).to.have.property('error').that.equals(\"Access forbidden to this ID, sorry\")\n})",
              "err": {},
              "uuid": "4cf7142b-6117-4c52-9a34-d91f94b9ea36",
              "parentUUID": "aa132f98-fb17-43b0-91c0-5cdfe2ec3b09",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PATCH /restaurants avec des données invalides",
              "fullTitle": "RESTAURANT router PATCH /restaurants avec des données invalides",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const patchWithBadData = await supertest(app)\n.patch(`/restaurants/${ID4l8r}`)\n.set(\"Authorization\",`Bearer ${adminToken}`)\n.send({\n  name:\"Metropolis\",\n  owner:\"Five Pebbles\"\n})\n.expect(400)",
              "err": {},
              "uuid": "78b9f965-352d-41d0-88fa-b9df44362288",
              "parentUUID": "aa132f98-fb17-43b0-91c0-5cdfe2ec3b09",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE /restaurants sans token valide -> Erreur 401",
              "fullTitle": "RESTAURANT router DELETE /restaurants sans token valide -> Erreur 401",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const deleteThatWillFail = await supertest(app)\n.delete(`/restaurants/${ID4l8r}`)\n.expect(401)\n.then((res)=>{\n  // On vérifie qu'on a la bonne erreur\n  expect(res.body).to.have.property('error')\n})",
              "err": {},
              "uuid": "f87ec7e9-b4a3-4ac9-af1c-c3369201432a",
              "parentUUID": "aa132f98-fb17-43b0-91c0-5cdfe2ec3b09",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE /restaurants avec token utilisateur.ice -> Erreur 401",
              "fullTitle": "RESTAURANT router DELETE /restaurants avec token utilisateur.ice -> Erreur 401",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const anotherDeleteThatWillFail = await supertest(app)\n.delete(`/restaurants/${ID4l8r}`)\n.set(\"Authorization\",`Bearer ${userToken}`)\n.expect(403)\n.then((res) => {\n  // Encore une fois, on checke que c'est la bonne erreur\n  expect(res.body).to.have.property('error')\n})",
              "err": {},
              "uuid": "bcf0ed7b-ea75-4eca-a52d-b8ca8b536dbc",
              "parentUUID": "aa132f98-fb17-43b0-91c0-5cdfe2ec3b09",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE /restaurants avec token admin -> 200",
              "fullTitle": "RESTAURANT router DELETE /restaurants avec token admin -> 200",
              "timedOut": false,
              "duration": 60,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const aDeleteThatWorks = await supertest(app)\n.delete(`/restaurants/${ID4l8r}`)\n.set(\"Authorization\",`Bearer ${adminToken}`)\n.expect(200)",
              "err": {},
              "uuid": "14ddeef6-046d-42f1-8dba-39cd0935c892",
              "parentUUID": "aa132f98-fb17-43b0-91c0-5cdfe2ec3b09",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "90aec982-3211-490d-8460-06260edce63d",
            "cc950e08-5536-4451-9263-9b343a05ea8a",
            "05ab2dd8-4ffe-42cd-9e82-ede04f56385f",
            "0bca40bf-7118-4112-b782-952fdd0869b5",
            "bd9a5b4b-4894-474c-8d69-e424df80442d",
            "65d76412-2a1e-4319-853d-62d819c9499d",
            "4cf7142b-6117-4c52-9a34-d91f94b9ea36",
            "78b9f965-352d-41d0-88fa-b9df44362288",
            "f87ec7e9-b4a3-4ac9-af1c-c3369201432a",
            "bcf0ed7b-ea75-4eca-a52d-b8ca8b536dbc",
            "14ddeef6-046d-42f1-8dba-39cd0935c892"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 274,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7e4352db-97d2-408a-9198-17c40432459c",
          "title": "USER router",
          "fullFile": "/home/camille/Documents/PROJECTS-SupInfo/FoodExpress/test/users-test.js",
          "file": "/test/users-test.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"USER router\"",
              "fullTitle": "USER router \"after all\" hook in \"USER router\"",
              "timedOut": false,
              "duration": 203,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "for (let i = 0; i < usersIDs.length; i++) {\nconst gettingDeleted = usersIDs[i];\nawait supertest(app).delete(`/users/${gettingDeleted}`).set(\"Authorization\",`Bearer ${rawAdminToken}`)\nconsole.log(`User with ID <${gettingDeleted}> got deleted !`)\n  }",
              "err": {},
              "uuid": "6662f163-c824-44c3-94b5-837e02076484",
              "parentUUID": "7e4352db-97d2-408a-9198-17c40432459c",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "GET /users",
              "fullTitle": "USER router GET /users",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await supertest(app)\n.get(\"/users\")\n.expect(403)\n.then((response)=>{\n  assert.equal(typeof(response.body),'object')\n})",
              "err": {},
              "uuid": "2847748f-94b2-4326-9ea6-871733a0f9ac",
              "parentUUID": "7e4352db-97d2-408a-9198-17c40432459c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /users -> création d'un utilisateur lambda",
              "fullTitle": "USER router POST /users -> création d'un utilisateur lambda",
              "timedOut": false,
              "duration": 412,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userBody = await supertest(app)\n.post(\"/users\")\n.send({\n  email:\"lambda@xyz.org\",\n  username:\"lambda\",\n  password:\"test1234\",\n  role:\"user\"\n}).expect(201).expect(\"Content-type\",/json/)\nusersIDs.push(userBody.body.id)",
              "err": {},
              "uuid": "c6b09dde-1967-42ab-ae97-637e7a4978be",
              "parentUUID": "7e4352db-97d2-408a-9198-17c40432459c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /users -> création d'un.e utilisateur.ice déjà présent.e dans la base de données",
              "fullTitle": "USER router POST /users -> création d'un.e utilisateur.ice déjà présent.e dans la base de données",
              "timedOut": false,
              "duration": 407,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const duplicateBody = await supertest(app)\n.post(\"/users\")\n.send({\n  email:\"lambda@xyz.org\",\n  username:\"lambda\",\n  password:\"qwerty\",\n  role:\"user\"\n}).expect(409)\n// usersIDs.push(duplicateBody.body.id) // J'ai laissé ça là au cas où, mais normalement la création de cet.te utilisateur.ice échoue\n                                      // alors c'est pas nécessaire",
              "err": {},
              "uuid": "9bca2f0c-ad19-4c84-97a5-f549b94f0a74",
              "parentUUID": "7e4352db-97d2-408a-9198-17c40432459c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /users -> création d'utilisateur admin",
              "fullTitle": "USER router POST /users -> création d'utilisateur admin",
              "timedOut": false,
              "duration": 413,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userAdmin = await supertest(app)\n.post(\"/users\")\n.send({\n  email:\"maestro@xyz.org\",\n  username:\"maestro\",\n  password:\"test1234\",\n  role:\"admin\"\n}).expect(201).expect(\"Content-type\",/json/) // Utilisation d'un (tout petit) regex pour la validation du type de réponse\nusersIDs.push(userAdmin.body.id)",
              "err": {},
              "uuid": "860303ea-462f-48c8-adf7-b0d92778b20c",
              "parentUUID": "7e4352db-97d2-408a-9198-17c40432459c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /users/login -> JWT login en tant qu'utilisateur.ice",
              "fullTitle": "USER router POST /users/login -> JWT login en tant qu'utilisateur.ice",
              "timedOut": false,
              "duration": 738,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await supertest(app)\n.post(\"/users/login\")\n.send({\n  username:\"lambda\",\n  password:\"test1234\"\n}).expect(200)\nconst { token } = res.body;\nexpect(token).to.be.a('string');\n/*-----------------------+\n| Vérification du token |\n+-----------------------*/\nconst decoded = jwt.decode(token, { complete: true });\nexpect(decoded).to.be.an('object');\nexpect(decoded).to.have.property('header');\nexpect(decoded.header).to.include({ alg: 'HS256', typ: 'JWT' });\nexpect(decoded.payload).to.include.keys(['sub', 'iat', 'exp', 'role']);\n\n  // Et vérification de la signature du token\n  const verified = jwt.verify(token, process.env.SECRET, {\nalgorithms: ['HS256']\n  });\n\n  expect(verified.sub).to.be.a('string');\n  expect(verified.role).to.equal('user');\n  expect(verified.exp * 1000).to.be.greaterThan(Date.now()); // On s'assure que le token est toujours valide\n\n  userToken = verified // Stockage du token utilisateur.ice pour plus tard\n  rawUserToken = token",
              "err": {},
              "uuid": "26c8c040-fe0c-40d4-a7f7-d6119cd2a600",
              "parentUUID": "7e4352db-97d2-408a-9198-17c40432459c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /users/login -> JWT login en tant qu'administrateur.ice",
              "fullTitle": "USER router POST /users/login -> JWT login en tant qu'administrateur.ice",
              "timedOut": false,
              "duration": 741,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await supertest(app)\n.post(\"/users/login\")\n.send({\n  username:\"maestro\",\n  password:\"test1234\"\n}).expect(200)\nconst { token } = res.body;\nexpect(token).to.be.a('string');\n/*-----------------------+\n| Vérification du token |\n+-----------------------*/\nconst decoded = jwt.decode(token, { complete: true });\nexpect(decoded).to.be.an('object');\nexpect(decoded).to.have.property('header');\nexpect(decoded.header).to.include({ alg: 'HS256', typ: 'JWT' }); // adapt if RS256\nexpect(decoded.payload).to.include.keys(['sub', 'iat', 'exp', 'role']); // adapt to your claims\n\n\n  // Et vérification de la signature du token\n  const verified = jwt.verify(token, process.env.SECRET, {\nalgorithms: ['HS256']\n  });\n\n  expect(verified.sub).to.be.a('string');\n  expect(verified.role).to.equal('admin');\n  expect(verified.exp * 1000).to.be.greaterThan(Date.now()); // On s'assure que le token est toujours valide\n\n  adminToken = verified // Stockage du token administrateur.ice pour plus tard\n  rawAdminToken = token",
              "err": {},
              "uuid": "a9b6bdfa-1c39-43a0-ac5a-ca2c014c017b",
              "parentUUID": "7e4352db-97d2-408a-9198-17c40432459c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PATCH /users/login/<userID> -> Lambda peut y accéder, Maestro aussi",
              "fullTitle": "USER router PATCH /users/login/<userID> -> Lambda peut y accéder, Maestro aussi",
              "timedOut": false,
              "duration": 425,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userID = userToken.sub\nconst res = await supertest(app)\n.patch(`/users/${userID}`)\n.set(\"Authorization\",`Bearer ${rawUserToken}`)\n.send({\n  username:\"omicron\",\n  password:\"azerty\"\n}).expect(200)\n// On s'assure vite fait que la réponse contient bien les modifications demandées\nexpect(res.body.username).to.equal(\"omicron\");\nexpect(res.body).to.not.have.property(\"password\"); // La réponse ne doit pas renvoyer le mdp, même hashé. On vérifie au cas où",
              "err": {},
              "uuid": "e1802409-8942-4d2f-8570-b51613a056a4",
              "parentUUID": "7e4352db-97d2-408a-9198-17c40432459c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PATCH /users/login/<adminID> -> Maestro peut y accéder, Lambda/Omicron ne peut pas",
              "fullTitle": "USER router PATCH /users/login/<adminID> -> Maestro peut y accéder, Lambda/Omicron ne peut pas",
              "timedOut": false,
              "duration": 71,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userID = userToken.sub\nconst res = await supertest(app)\n.patch(`/users/${userID}`)\n.set(\"Authorization\",`Bearer ${rawAdminToken}`)\n.send({\n  username:\"lambda\",\n  email:\"some.email@xyz.gay\"\n}).expect(200)",
              "err": {},
              "uuid": "508d80f0-f991-4511-a8bd-08a96f12a22f",
              "parentUUID": "7e4352db-97d2-408a-9198-17c40432459c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PATCH /users/login/<adminID> -> Maestro pourrait y accéder, Lambda ne peut pas et prend une erreur",
              "fullTitle": "USER router PATCH /users/login/<adminID> -> Maestro pourrait y accéder, Lambda ne peut pas et prend une erreur",
              "timedOut": false,
              "duration": 1121,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userID = userToken.sub\n  \n// Création et login d'un utilisateur juste pour ce test\nconst gammaRes = await supertest(app)\n.post(\"/users/\")\n.send({\n  email:\"gamma@xyz.org\",\n  username:\"gamma\",\n  password:\"test1234\",\n  role:\"user\"\n}).expect(201).expect(\"Content-type\",/json/)\nusersIDs.push(gammaRes.body.id)\nconst _res = await supertest(app)\n.post(\"/users/login\")\n.send({\n  username:\"gamma\",\n  password:\"test1234\"\n}).expect(200)\nconst { token } = _res.body;\nconst res = await supertest(app)\n.patch(`/users/${userID}`)\n.set(\"Authorization\",`Bearer ${token}`)\n.send({\n  email:\"evil.email@mean.corp\",\n  username:\"pwnd\",\n  password:\"evil-password\",\n  role:\"evil-admin\"\n}).expect(403).expect(\"Content-type\",/json/)\nexpect(res.body).to.have.property('error')",
              "err": {},
              "uuid": "d3b69374-b106-4e6c-bbb0-8ec988e57bf2",
              "parentUUID": "7e4352db-97d2-408a-9198-17c40432459c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Tente un PATCH sur l'ID d'un.e utilisateur.ice sans authentification",
              "fullTitle": "USER router Tente un PATCH sur l'ID d'un.e utilisateur.ice sans authentification",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const randomID = usersIDs[Math.floor(Math.random() * usersIDs.length)]; // On choisis une ID aléatoire, le test doit échouer de toute manière\nawait supertest(app)\n.patch(`/users/${randomID}`)\n.send({\n  email:\"this.should@fail.now\"\n}).expect(401)",
              "err": {},
              "uuid": "723a4dcb-0087-4e5b-8f04-a96b08b8755d",
              "parentUUID": "7e4352db-97d2-408a-9198-17c40432459c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Tente un DELETE sur l'ID d'un.e utilisateur.ice sans authentification",
              "fullTitle": "USER router Tente un DELETE sur l'ID d'un.e utilisateur.ice sans authentification",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const randomID = usersIDs[Math.floor(Math.random() * usersIDs.length)]; // ID aléatoire, encore une fois\nawait supertest(app)\n.delete(`/users/${randomID}`)\n.expect(401)",
              "err": {},
              "uuid": "42a406d9-602d-4fcf-88d7-ae3b6e45f34c",
              "parentUUID": "7e4352db-97d2-408a-9198-17c40432459c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2847748f-94b2-4326-9ea6-871733a0f9ac",
            "c6b09dde-1967-42ab-ae97-637e7a4978be",
            "9bca2f0c-ad19-4c84-97a5-f549b94f0a74",
            "860303ea-462f-48c8-adf7-b0d92778b20c",
            "26c8c040-fe0c-40d4-a7f7-d6119cd2a600",
            "a9b6bdfa-1c39-43a0-ac5a-ca2c014c017b",
            "e1802409-8942-4d2f-8570-b51613a056a4",
            "508d80f0-f991-4511-a8bd-08a96f12a22f",
            "d3b69374-b106-4e6c-bbb0-8ec988e57bf2",
            "723a4dcb-0087-4e5b-8f04-a96b08b8755d",
            "42a406d9-602d-4fcf-88d7-ae3b6e45f34c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4348,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.4"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.4"
    },
    "marge": {
      "options": null,
      "version": "6.3.0"
    }
  }
}