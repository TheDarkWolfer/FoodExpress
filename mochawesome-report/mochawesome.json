{
  "stats": {
    "suites": 3,
    "tests": 33,
    "passes": 33,
    "pending": 0,
    "failures": 0,
    "start": "2025-10-23T23:39:42.466Z",
    "end": "2025-10-23T23:39:47.131Z",
    "duration": 4665,
    "testsRegistered": 33,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "0e570e0f-43a8-4d9e-89a1-a64f2adf9d12",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b078428b-7c5f-40be-995b-71c8b616d840",
          "title": "MENU router",
          "fullFile": "/home/camille/Documents/PROJECTS-SupInfo/FoodExpress/test/menus-test.js",
          "file": "/test/menus-test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"MENU router\"",
              "fullTitle": "MENU router \"before all\" hook in \"MENU router\"",
              "timedOut": false,
              "duration": 647,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const _res = await supertest(app)\n.post(\"/menu\")\n.set(\"Authorization\",`Bearer ${adminToken}`)\n.send({\n  name:\"Fillet o' Jetfish\",\n  description:\"A cooked filet of jetfish, straight from Shoreline !\",\n  price:13.99,\n  category:\"seafood\"\n})\n.expect(201) // Devrait pas poser problème, mais on sais jamais\nID4l8r = _res.body._id // on prépare une variable pour stocker l'ID qu'on va secouer un peu pour les tests\nmenusIDs.push(ID4l8r) // On prévois de nettoyer après les tests, quand même",
              "err": {},
              "uuid": "b85eaf35-c462-4303-8882-06e6dab384c6",
              "parentUUID": "b078428b-7c5f-40be-995b-71c8b616d840",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"MENU router\"",
              "fullTitle": "MENU router \"after all\" hook in \"MENU router\"",
              "timedOut": false,
              "duration": 55,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "for (let i = 0; i < menusIDs.length; i++) {\nconst gettingDeleted = menusIDs[i];\nawait supertest(app).delete(`/menu/${gettingDeleted}`).set(\"Authorization\",`Bearer ${adminToken}`)\nconsole.log(`Menu with ID <${gettingDeleted}> got deleted !`)\n}",
              "err": {},
              "uuid": "b4a9c567-6545-4434-9060-79c9d9292f17",
              "parentUUID": "b078428b-7c5f-40be-995b-71c8b616d840",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "GET /menu -> 200 avec les données en JSON",
              "fullTitle": "MENU router GET /menu -> 200 avec les données en JSON",
              "timedOut": false,
              "duration": 114,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const gettingAllMenus = await supertest(app)\n.get(\"/menu\")\n.expect(200)\n.expect(\"Content-Type\",/json/) // On vérifie qu'on a bien un objet JSON",
              "err": {},
              "uuid": "cfd65a44-6ff2-4e07-b41b-cf723a901875",
              "parentUUID": "b078428b-7c5f-40be-995b-71c8b616d840",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET /menu avec query -> 200 avec des données JSON filtrées",
              "fullTitle": "MENU router GET /menu avec query -> 200 avec des données JSON filtrées",
              "timedOut": false,
              "duration": 55,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const gettingMenus = await supertest(app)\n.get(\"/menu\")\n.query({search:\"Bat\"})\n.expect(200)\n.expect(\"Content-Type\",/json/)\nassert.ok(Array.isArray(gettingMenus.body),\"Response should be an array. (if it's not, send help)\")\n// 'Dé-commenter' la ligne qui suit pour checker le nombre d'objets rendus par le filtre. Désactivé par défaut car \n// vérifier la longueur de la réponse dépend du filtre utilisé dans les tests, du contenu de la base de données, et \n// probablement de la phase de la lune à ce point...\n//assert.equal(gettingMenus.body.length,10,\"Should display 10 items. If not, bring some help please.\")",
              "err": {},
              "uuid": "c285cd9e-e22e-44eb-9eed-fa42911a40bf",
              "parentUUID": "b078428b-7c5f-40be-995b-71c8b616d840",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /menu sans token -> 401 Unauthorized",
              "fullTitle": "MENU router POST /menu sans token -> 401 Unauthorized",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const unauthorizedAttempt = await supertest(app)\n.post(\"/menu\")\n.send({\n  name:\"Unfortunate Development\",\n  description:\"The results of poor planning\",\n  price:99.99,\n  category:\"mistakes\"\n})\n.expect(401)",
              "err": {},
              "uuid": "34893415-a72f-4e3e-a650-536de13464f8",
              "parentUUID": "b078428b-7c5f-40be-995b-71c8b616d840",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /menu avec token utilisateur.ice -> 403 Forbidden",
              "fullTitle": "MENU router POST /menu avec token utilisateur.ice -> 403 Forbidden",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const forbiddenAttempt = await supertest(app)\n.post(\"/menu\")\n.set(\"Authorization\",`Bearer ${userToken}`)\n.send({\n  name:\"Coalescepide Curry\",\n  description:\"A bunch of coalescepides fried in a nice curry\",\n  price:12.34,\n  category:\"spicy\"\n})\n.expect(403)",
              "err": {},
              "uuid": "37e589f6-3c61-41ad-9a5f-c9be4817578d",
              "parentUUID": "b078428b-7c5f-40be-995b-71c8b616d840",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /menu avec token administrateur.ice -> 201 Created",
              "fullTitle": "MENU router POST /menu avec token administrateur.ice -> 201 Created",
              "timedOut": false,
              "duration": 58,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newMenuCreation = await supertest(app)\n.post(\"/menu\")\n.set(\"Authorization\",`Bearer ${adminToken}`)\n.send({\n  name:\"Neuron Fly\",\n  description:\"A singular neuron fly ; may cause glowing upon consumption\",\n  price:101.99,\n  category:\"enlightened\"\n})\n.expect(201)\n.expect(\"Content-Type\",/json/)\n// On vérifie le contenu de la réponse à laquelle nous avons droit\nexpect(newMenuCreation.body).to.be.an(\"object\");\nexpect(newMenuCreation.body.name).to.equal(\"Neuron Fly\");\nexpect(newMenuCreation.body).to.have.property(\"_id\");\nmenusIDs.push(newMenuCreation.body._id);",
              "err": {},
              "uuid": "afe87052-47c3-4198-9f7a-090975c0a001",
              "parentUUID": "b078428b-7c5f-40be-995b-71c8b616d840",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PATCH /menu/<ID> sans token -> 401 Unauthorized",
              "fullTitle": "MENU router PATCH /menu/<ID> sans token -> 401 Unauthorized",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const unauthenticatedPatch = await supertest(app)\n.patch(`/menu/${ID4l8r}`)\n.send({\n  name:\"Red Spider Roast\",\n  description:\"Just mind the toxins...\"\n})\n.expect(401)",
              "err": {},
              "uuid": "68f6f901-fb1f-4ec1-be21-44e4df5b74e2",
              "parentUUID": "b078428b-7c5f-40be-995b-71c8b616d840",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PATCH /menu/<ID> avec un token utilisateur.ice -> 403 Forbidden",
              "fullTitle": "MENU router PATCH /menu/<ID> avec un token utilisateur.ice -> 403 Forbidden",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const forbiddenPatch = await supertest(app)\n.patch(`/menu/${ID4l8r}`)\n.set(\"Authorization\",`Bearer ${userToken}`)\n.send({\n  name:\"Chilly Popcorn plant\",\n  description:\"Popcorn plant bred in the harsh winters of the Silent Construct, a tasty dessert\"\n})\n.expect(403)",
              "err": {},
              "uuid": "93873d8d-487b-43db-9d3b-a7dd6f1ae259",
              "parentUUID": "b078428b-7c5f-40be-995b-71c8b616d840",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PATCH /menu/<ID> avec un token administrateur.ice -> 200",
              "fullTitle": "MENU router PATCH /menu/<ID> avec un token administrateur.ice -> 200",
              "timedOut": false,
              "duration": 61,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const successfulPatch = await supertest(app)\n.patch(`/menu/${ID4l8r}`)\n.set(\"Authorization\",`Bearer ${adminToken}`)\n.send({\n  name:\"[REDACTED]\",\n  description:\"Recipe to engineer one's cells to allow for self-annihilation. Unavailable under the self-annihilation edict\"\n})\n.expect(200)\n\nexpect(successfulPatch.body).to.be.an(\"object\");\nexpect(successfulPatch.body.name).to.equal(\"[REDACTED]\");",
              "err": {},
              "uuid": "0b7ae0a7-d902-426a-9335-3289013c96bd",
              "parentUUID": "b078428b-7c5f-40be-995b-71c8b616d840",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE /menu/<ID> -> 401",
              "fullTitle": "MENU router DELETE /menu/<ID> -> 401",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const unauthorizedDelete = await supertest(app)\n.delete(`/menu/${ID4l8r}`)\n.expect(401)",
              "err": {},
              "uuid": "ea708d3b-19e3-47db-bb9b-33ec7a277e5d",
              "parentUUID": "b078428b-7c5f-40be-995b-71c8b616d840",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE /menu/<ID> avec token utilisateur.ice -> 403",
              "fullTitle": "MENU router DELETE /menu/<ID> avec token utilisateur.ice -> 403",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const forbiddenDelete = await supertest(app)\n.delete(`/menu/${ID4l8r}`)\n.set(\"Authorization\",`Bearer ${userToken}`)\n.expect(403)",
              "err": {},
              "uuid": "efc4d9f5-3f75-49be-be65-4e127ff4376c",
              "parentUUID": "b078428b-7c5f-40be-995b-71c8b616d840",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE /menu/<ID> avec token administrateur.ice -> 200",
              "fullTitle": "MENU router DELETE /menu/<ID> avec token administrateur.ice -> 200",
              "timedOut": false,
              "duration": 57,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const successfulDelete = await supertest(app)\n.delete(`/menu/${ID4l8r}`)\n.set(\"Authorization\",`Bearer ${adminToken}`)\n.expect(200)\nmenusIDs = menusIDs.filter(id => id !== ID4l8r)",
              "err": {},
              "uuid": "aeb8bdf4-83e9-43eb-bd57-24b2a5b4dc36",
              "parentUUID": "b078428b-7c5f-40be-995b-71c8b616d840",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cfd65a44-6ff2-4e07-b41b-cf723a901875",
            "c285cd9e-e22e-44eb-9eed-fa42911a40bf",
            "34893415-a72f-4e3e-a650-536de13464f8",
            "37e589f6-3c61-41ad-9a5f-c9be4817578d",
            "afe87052-47c3-4198-9f7a-090975c0a001",
            "68f6f901-fb1f-4ec1-be21-44e4df5b74e2",
            "93873d8d-487b-43db-9d3b-a7dd6f1ae259",
            "0b7ae0a7-d902-426a-9335-3289013c96bd",
            "ea708d3b-19e3-47db-bb9b-33ec7a277e5d",
            "efc4d9f5-3f75-49be-be65-4e127ff4376c",
            "aeb8bdf4-83e9-43eb-bd57-24b2a5b4dc36"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 360,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "010f866a-fc93-4d93-afdb-c5407493352f",
          "title": "RESTAURANT router",
          "fullFile": "/home/camille/Documents/PROJECTS-SupInfo/FoodExpress/test/restaurants-test.js",
          "file": "/test/restaurants-test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"RESTAURANT router\"",
              "fullTitle": "RESTAURANT router \"before all\" hook in \"RESTAURANT router\"",
              "timedOut": false,
              "duration": 58,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const _res = await supertest(app)\n.post(\"/restaurants\")\n.set(\"Authorization\",`Bearer ${adminToken}`)\n.send({\n  name:\"Outer Expanse\",\n  address:\"Past the Farm Arrays\",\n  phone:\"77777777\",\n  opening_hours:\"Every Cycle\"\n})\n.expect(201) // Devrait pas poser problème, mais on sais jamais\nID4l8r = _res.body._id // on prépare une variable pour stocker l'ID qu'on va secouer un peu pour les tests\nrestaurantsIDs.push(ID4l8r) // On prévois de nettoyer après les tests, quand même",
              "err": {},
              "uuid": "03fb5b87-0ade-444d-b6cb-9b16dbb3601a",
              "parentUUID": "010f866a-fc93-4d93-afdb-c5407493352f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"RESTAURANT router\"",
              "fullTitle": "RESTAURANT router \"after all\" hook in \"RESTAURANT router\"",
              "timedOut": false,
              "duration": 53,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "for (let i = 0; i < restaurantsIDs.length; i++) {\nconst gettingDeleted = restaurantsIDs[i];\nawait supertest(app).delete(`/restaurants/${gettingDeleted}`).set(\"Authorization\",`Bearer ${adminToken}`)\nconsole.log(`Restaurant with ID <${gettingDeleted}> got deleted !`)\n}",
              "err": {},
              "uuid": "2afd8dbe-149a-44ee-a3b7-3318e2244786",
              "parentUUID": "010f866a-fc93-4d93-afdb-c5407493352f",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "GET /restaurants sans token -> Réussite et affichage des restaurants",
              "fullTitle": "RESTAURANT router GET /restaurants sans token -> Réussite et affichage des restaurants",
              "timedOut": false,
              "duration": 55,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const simpleGET = await supertest(app)\n.get(\"/restaurants\")\n.expect(200)\n.then((res) => {\n})",
              "err": {},
              "uuid": "5e9a4dea-b224-4d1c-927e-c3468784ff83",
              "parentUUID": "010f866a-fc93-4d93-afdb-c5407493352f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /restaurants sans token -> Erreur 401",
              "fullTitle": "RESTAURANT router POST /restaurants sans token -> Erreur 401",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const designedToFail = await supertest(app)\n.post(\"/restaurants\")\n.send({\n  name:\"The Restaurant of Failure\",\n  address:\"401 Error Avenue, FailCity\",\n  phone:\"401000000\",\n  opening_hours:\"From 4:01am to 4:01pm\"\n})\n.expect(401)\n.then((res)=> {expect(res.body).to.have.property('error') // On s'assure d'avoir un message en plus du code d'erreur\n})",
              "err": {},
              "uuid": "44895ac1-e5a7-4143-a20a-5aca6c9abeeb",
              "parentUUID": "010f866a-fc93-4d93-afdb-c5407493352f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /restaurants avec token utilisateur -> Erreur 403, mais cette fois c'est un problème de rôle",
              "fullTitle": "RESTAURANT router POST /restaurants avec token utilisateur -> Erreur 403, mais cette fois c'est un problème de rôle",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const designedToFailButDifferently = await supertest(app) \n.post(\"/restaurants\")\n.set(\"Authorization\",`Bearer ${userToken}`)\n.send({\n  name:\"The Restaurant of Failure 2 Electric boogaloo\",\n  address:\"403 Error Avenue, FailCity\",\n  phone:\"403000000\",\n  opening_hours:\"From 4:03am to 4:03pm\"\n})\n.expect(403)",
              "err": {},
              "uuid": "08572e0c-a4b4-44c5-af3b-123a44136070",
              "parentUUID": "010f866a-fc93-4d93-afdb-c5407493352f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /restaurants avec token admin -> Création d'un nouveau restaurant",
              "fullTitle": "RESTAURANT router POST /restaurants avec token admin -> Création d'un nouveau restaurant",
              "timedOut": false,
              "duration": 56,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const designedToSucceed = await supertest(app)\n.post(\"/restaurants\")\n.set(\"Authorization\",`Bearer ${adminToken}`)\n.send({\n  name:\"The Restaurant of Success\",\n  address:\"200 Success Street, GoodCity\",\n  phone:\"200200200\",\n  opening_hours:\"From 2:00am to 2:00am\"\n})\n.expect(201)",
              "err": {},
              "uuid": "685ba41d-0ae8-4dc8-a1e6-d8eced9cd937",
              "parentUUID": "010f866a-fc93-4d93-afdb-c5407493352f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /restaurants avec un token valide mais des données invalides -> Erreur 400",
              "fullTitle": "RESTAURANT router POST /restaurants avec un token valide mais des données invalides -> Erreur 400",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const willFailAgain = await supertest(app)\n.post(\"/restaurants\")\n.set(\"Authorization\",`Bearer ${adminToken}`)\n.send({\n  name:new Set(),\n  address:NaN,\n  phone:undefined\n  // Pas d'horaires, histoire de vraiment tout faire comme il faut pas :p\n})\n.expect(400)\n.then((res) => {\n  // On s'assure de bien avoir une erreur de validation\n  expect(res.body).to.have.property('message').that.equals(\"Validation error\")\n})",
              "err": {},
              "uuid": "13a85902-5a98-4c66-882f-5bd7463fba34",
              "parentUUID": "010f866a-fc93-4d93-afdb-c5407493352f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PATCH /restaurants sans token valide -> Erreur 401",
              "fullTitle": "RESTAURANT router PATCH /restaurants sans token valide -> Erreur 401",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const patch2Fail = await supertest(app)\n.patch(`/restaurants/${ID4l8r}`)\n.send({\n  name:\"Subterranean\"\n})\n.expect(401)\n.then((res)=>{\n  expect(res.body).to.have.property('error').that.equals('Missing or invalid Authorization header')\n})",
              "err": {},
              "uuid": "ead26e85-259e-43cb-be11-aa7313aef3b1",
              "parentUUID": "010f866a-fc93-4d93-afdb-c5407493352f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PATCH /restaurants avec un token utilisateur.ice -> Erreur 403",
              "fullTitle": "RESTAURANT router PATCH /restaurants avec un token utilisateur.ice -> Erreur 403",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const otherPatch2Fail = await supertest(app)\n.patch(`/restaurants/${ID4l8r}`)\n.set(\"Authorization\",`Bearer ${userToken}`)\n.send({\n  name:\"Metropolis\"\n})\n.expect(403)\n.then((res) => {\n  expect(res.body).to.have.property('error').that.equals(\"Access forbidden to this ID, sorry\")\n})",
              "err": {},
              "uuid": "120c83cf-d45a-4937-b5e6-0775101d97c0",
              "parentUUID": "010f866a-fc93-4d93-afdb-c5407493352f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PATCH /restaurants avec des données invalides",
              "fullTitle": "RESTAURANT router PATCH /restaurants avec des données invalides",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const patchWithBadData = await supertest(app)\n.patch(`/restaurants/${ID4l8r}`)\n.set(\"Authorization\",`Bearer ${adminToken}`)\n.send({\n  name:\"Metropolis\",\n  owner:\"Five Pebbles\"\n})\n.expect(400)",
              "err": {},
              "uuid": "73493599-f289-4085-b101-61ac9021306d",
              "parentUUID": "010f866a-fc93-4d93-afdb-c5407493352f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE /restaurants sans token valide -> Erreur 401",
              "fullTitle": "RESTAURANT router DELETE /restaurants sans token valide -> Erreur 401",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const deleteThatWillFail = await supertest(app)\n.delete(`/restaurants/${ID4l8r}`)\n.expect(401)\n.then((res)=>{\n  // On vérifie qu'on a la bonne erreur\n  expect(res.body).to.have.property('error')\n})",
              "err": {},
              "uuid": "bc76c236-10ea-4401-980f-feddec0bd5cd",
              "parentUUID": "010f866a-fc93-4d93-afdb-c5407493352f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE /restaurants avec token utilisateur.ice -> Erreur 401",
              "fullTitle": "RESTAURANT router DELETE /restaurants avec token utilisateur.ice -> Erreur 401",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const anotherDeleteThatWillFail = await supertest(app)\n.delete(`/restaurants/${ID4l8r}`)\n.set(\"Authorization\",`Bearer ${userToken}`)\n.expect(403)\n.then((res) => {\n  // Encore une fois, on checke que c'est la bonne erreur\n  expect(res.body).to.have.property('error')\n})",
              "err": {},
              "uuid": "90d0d7a4-8212-40dd-859d-a2c832920eea",
              "parentUUID": "010f866a-fc93-4d93-afdb-c5407493352f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE /restaurants avec token admin -> 200",
              "fullTitle": "RESTAURANT router DELETE /restaurants avec token admin -> 200",
              "timedOut": false,
              "duration": 54,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const aDeleteThatWorks = await supertest(app)\n.delete(`/restaurants/${ID4l8r}`)\n.set(\"Authorization\",`Bearer ${adminToken}`)\n.expect(200)",
              "err": {},
              "uuid": "7126109c-7d79-4d5d-a65c-b249658f0000",
              "parentUUID": "010f866a-fc93-4d93-afdb-c5407493352f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5e9a4dea-b224-4d1c-927e-c3468784ff83",
            "44895ac1-e5a7-4143-a20a-5aca6c9abeeb",
            "08572e0c-a4b4-44c5-af3b-123a44136070",
            "685ba41d-0ae8-4dc8-a1e6-d8eced9cd937",
            "13a85902-5a98-4c66-882f-5bd7463fba34",
            "ead26e85-259e-43cb-be11-aa7313aef3b1",
            "120c83cf-d45a-4937-b5e6-0775101d97c0",
            "73493599-f289-4085-b101-61ac9021306d",
            "bc76c236-10ea-4401-980f-feddec0bd5cd",
            "90d0d7a4-8212-40dd-859d-a2c832920eea",
            "7126109c-7d79-4d5d-a65c-b249658f0000"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 184,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2bebd79f-5f87-48d9-b8ea-445a60d63200",
          "title": "USER router",
          "fullFile": "/home/camille/Documents/PROJECTS-SupInfo/FoodExpress/test/users-test.js",
          "file": "/test/users-test.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"USER router\"",
              "fullTitle": "USER router \"after all\" hook in \"USER router\"",
              "timedOut": false,
              "duration": 321,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "for (let i = 0; i < usersIDs.length; i++) {\nconst gettingDeleted = usersIDs[i];\nawait supertest(app).delete(`/users/${gettingDeleted}`).set(\"Authorization\",`Bearer ${rawAdminToken}`)\nconsole.log(`User with ID <${gettingDeleted}> got deleted !`)\n  }",
              "err": {},
              "uuid": "55576422-84c2-415c-b4e1-05f6cc13cd27",
              "parentUUID": "2bebd79f-5f87-48d9-b8ea-445a60d63200",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "GET /users",
              "fullTitle": "USER router GET /users",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await supertest(app)\n.get(\"/users\")\n.expect(403)\n.then((response)=>{\n  assert.equal(typeof(response.body),'object')\n})",
              "err": {},
              "uuid": "c41873ce-3550-4bac-bf85-94f84967785b",
              "parentUUID": "2bebd79f-5f87-48d9-b8ea-445a60d63200",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /users -> création d'un utilisateur lambda",
              "fullTitle": "USER router POST /users -> création d'un utilisateur lambda",
              "timedOut": false,
              "duration": 248,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userBody = await supertest(app)\n.post(\"/users\")\n.send({\n  email:\"lambda@xyz.org\",\n  username:\"lambda\",\n  password:\"test1234\",\n  role:\"user\"\n}).expect(201).expect(\"Content-type\",/json/)\nusersIDs.push(userBody.body.id)",
              "err": {},
              "uuid": "9d0676e2-a5bb-4c7f-8c62-271f6d438b68",
              "parentUUID": "2bebd79f-5f87-48d9-b8ea-445a60d63200",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /users -> création d'un.e utilisateur.ice déjà présent.e dans la base de données",
              "fullTitle": "USER router POST /users -> création d'un.e utilisateur.ice déjà présent.e dans la base de données",
              "timedOut": false,
              "duration": 290,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const duplicateBody = await supertest(app)\n.post(\"/users\")\n.send({\n  email:\"lambda@xyz.org\",\n  username:\"lambda\",\n  password:\"qwerty\",\n  role:\"user\"\n}).expect(409)\n// usersIDs.push(duplicateBody.body.id) // J'ai laissé ça là au cas où, mais normalement la création de cet.te utilisateur.ice échoue\n                                      // alors c'est pas nécessaire",
              "err": {},
              "uuid": "644d5b4b-0684-41dc-a18e-e43eb524c4ef",
              "parentUUID": "2bebd79f-5f87-48d9-b8ea-445a60d63200",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /users -> création d'utilisateur admin",
              "fullTitle": "USER router POST /users -> création d'utilisateur admin",
              "timedOut": false,
              "duration": 277,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userAdmin = await supertest(app)\n.post(\"/users\")\n.send({\n  email:\"maestro@xyz.org\",\n  username:\"maestro\",\n  password:\"test1234\",\n  role:\"admin\"\n}).expect(201).expect(\"Content-type\",/json/) // Utilisation d'un (tout petit) regex pour la validation du type de réponse\nusersIDs.push(userAdmin.body.id)",
              "err": {},
              "uuid": "c08b1faa-051e-4459-af4e-ce92adf16253",
              "parentUUID": "2bebd79f-5f87-48d9-b8ea-445a60d63200",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /users/login -> JWT login en tant qu'utilisateur.ice",
              "fullTitle": "USER router POST /users/login -> JWT login en tant qu'utilisateur.ice",
              "timedOut": false,
              "duration": 440,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await supertest(app)\n.post(\"/users/login\")\n.send({\n  username:\"lambda\",\n  password:\"test1234\"\n}).expect(200)\nconst { token } = res.body;\nexpect(token).to.be.a('string');\n/*-----------------------+\n| Vérification du token |\n+-----------------------*/\nconst decoded = jwt.decode(token, { complete: true });\nexpect(decoded).to.be.an('object');\nexpect(decoded).to.have.property('header');\nexpect(decoded.header).to.include({ alg: 'HS256', typ: 'JWT' });\nexpect(decoded.payload).to.include.keys(['sub', 'iat', 'exp', 'role']);\n\n  // Et vérification de la signature du token\n  const verified = jwt.verify(token, process.env.SECRET, {\nalgorithms: ['HS256']\n  });\n\n  expect(verified.sub).to.be.a('string');\n  expect(verified.role).to.equal('user');\n  expect(verified.exp * 1000).to.be.greaterThan(Date.now()); // On s'assure que le token est toujours valide\n\n  userToken = verified // Stockage du token utilisateur.ice pour plus tard\n  rawUserToken = token",
              "err": {},
              "uuid": "607a1389-ec1d-49ca-b29e-750eda2f01f1",
              "parentUUID": "2bebd79f-5f87-48d9-b8ea-445a60d63200",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /users/login -> JWT login en tant qu'administrateur.ice",
              "fullTitle": "USER router POST /users/login -> JWT login en tant qu'administrateur.ice",
              "timedOut": false,
              "duration": 419,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await supertest(app)\n.post(\"/users/login\")\n.send({\n  username:\"maestro\",\n  password:\"test1234\"\n}).expect(200)\nconst { token } = res.body;\nexpect(token).to.be.a('string');\n/*-----------------------+\n| Vérification du token |\n+-----------------------*/\nconst decoded = jwt.decode(token, { complete: true });\nexpect(decoded).to.be.an('object');\nexpect(decoded).to.have.property('header');\nexpect(decoded.header).to.include({ alg: 'HS256', typ: 'JWT' }); // adapt if RS256\nexpect(decoded.payload).to.include.keys(['sub', 'iat', 'exp', 'role']); // adapt to your claims\n\n\n  // Et vérification de la signature du token\n  const verified = jwt.verify(token, process.env.SECRET, {\nalgorithms: ['HS256']\n  });\n\n  expect(verified.sub).to.be.a('string');\n  expect(verified.role).to.equal('admin');\n  expect(verified.exp * 1000).to.be.greaterThan(Date.now()); // On s'assure que le token est toujours valide\n\n  adminToken = verified // Stockage du token administrateur.ice pour plus tard\n  rawAdminToken = token",
              "err": {},
              "uuid": "64a6b11d-4a55-4698-820d-cad54ac686ed",
              "parentUUID": "2bebd79f-5f87-48d9-b8ea-445a60d63200",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PATCH /users/login/<userID> -> Lambda peut y accéder, Maestro aussi",
              "fullTitle": "USER router PATCH /users/login/<userID> -> Lambda peut y accéder, Maestro aussi",
              "timedOut": false,
              "duration": 252,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userID = userToken.sub\nconst res = await supertest(app)\n.patch(`/users/${userID}`)\n.set(\"Authorization\",`Bearer ${rawUserToken}`)\n.send({\n  username:\"omicron\",\n  password:\"azerty\"\n}).expect(200)\n// On s'assure vite fait que la réponse contient bien les modifications demandées\nexpect(res.body.username).to.equal(\"omicron\");\nexpect(res.body).to.not.have.property(\"password\"); // La réponse ne doit pas renvoyer le mdp, même hashé. On vérifie au cas où",
              "err": {},
              "uuid": "0777fd38-b08d-48fa-b734-111de758ec74",
              "parentUUID": "2bebd79f-5f87-48d9-b8ea-445a60d63200",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PATCH /users/login/<adminID> -> Maestro peut y accéder, Lambda/Omicron ne peut pas",
              "fullTitle": "USER router PATCH /users/login/<adminID> -> Maestro peut y accéder, Lambda/Omicron ne peut pas",
              "timedOut": false,
              "duration": 55,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userID = userToken.sub\nconst res = await supertest(app)\n.patch(`/users/${userID}`)\n.set(\"Authorization\",`Bearer ${rawAdminToken}`)\n.send({\n  username:\"lambda\",\n  email:\"some.email@xyz.gay\"\n}).expect(200)",
              "err": {},
              "uuid": "6271415e-b18c-4eb1-b6f8-f73399b54691",
              "parentUUID": "2bebd79f-5f87-48d9-b8ea-445a60d63200",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PATCH /users/login/<adminID> -> Maestro pourrait y accéder, Lambda ne peut pas et prend une erreur",
              "fullTitle": "USER router PATCH /users/login/<adminID> -> Maestro pourrait y accéder, Lambda ne peut pas et prend une erreur",
              "timedOut": false,
              "duration": 990,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userID = userToken.sub\n  \n// Création et login d'un utilisateur juste pour ce test\nconst gammaRes = await supertest(app)\n.post(\"/users/\")\n.send({\n  email:\"gamma@xyz.org\",\n  username:\"gamma\",\n  password:\"test1234\",\n  role:\"user\"\n}).expect(201).expect(\"Content-type\",/json/)\nusersIDs.push(gammaRes.body.id)\nconst _res = await supertest(app)\n.post(\"/users/login\")\n.send({\n  username:\"gamma\",\n  password:\"test1234\"\n}).expect(200)\nconst { token } = _res.body;\nconst res = await supertest(app)\n.patch(`/users/${userID}`)\n.set(\"Authorization\",`Bearer ${token}`)\n.send({\n  email:\"evil.email@mean.corp\",\n  username:\"pwnd\",\n  password:\"evil-password\",\n  role:\"evil-admin\"\n}).expect(403).expect(\"Content-type\",/json/)\nexpect(res.body).to.have.property('error')",
              "err": {},
              "uuid": "1bad52d8-9f56-475f-9f34-de9244a07fa2",
              "parentUUID": "2bebd79f-5f87-48d9-b8ea-445a60d63200",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Tente un PATCH sur l'ID d'un.e utilisateur.ice sans authentification",
              "fullTitle": "USER router Tente un PATCH sur l'ID d'un.e utilisateur.ice sans authentification",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const randomID = usersIDs[Math.floor(Math.random() * usersIDs.length)]; // On choisis une ID aléatoire, le test doit échouer de toute manière\nawait supertest(app)\n.patch(`/users/${randomID}`)\n.send({\n  email:\"this.should@fail.now\"\n}).expect(401)",
              "err": {},
              "uuid": "2acbe3b5-23ef-42a2-9ec8-136fd0cd987d",
              "parentUUID": "2bebd79f-5f87-48d9-b8ea-445a60d63200",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Tente un DELETE sur l'ID d'un.e utilisateur.ice sans authentification",
              "fullTitle": "USER router Tente un DELETE sur l'ID d'un.e utilisateur.ice sans authentification",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const randomID = usersIDs[Math.floor(Math.random() * usersIDs.length)]; // ID aléatoire, encore une fois\nawait supertest(app)\n.delete(`/users/${randomID}`)\n.expect(401)",
              "err": {},
              "uuid": "f6d6a80b-bc11-46c9-a3a9-46327728326e",
              "parentUUID": "2bebd79f-5f87-48d9-b8ea-445a60d63200",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c41873ce-3550-4bac-bf85-94f84967785b",
            "9d0676e2-a5bb-4c7f-8c62-271f6d438b68",
            "644d5b4b-0684-41dc-a18e-e43eb524c4ef",
            "c08b1faa-051e-4459-af4e-ce92adf16253",
            "607a1389-ec1d-49ca-b29e-750eda2f01f1",
            "64a6b11d-4a55-4698-820d-cad54ac686ed",
            "0777fd38-b08d-48fa-b734-111de758ec74",
            "6271415e-b18c-4eb1-b6f8-f73399b54691",
            "1bad52d8-9f56-475f-9f34-de9244a07fa2",
            "2acbe3b5-23ef-42a2-9ec8-136fd0cd987d",
            "f6d6a80b-bc11-46c9-a3a9-46327728326e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2975,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.4"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.4"
    },
    "marge": {
      "options": null,
      "version": "6.3.0"
    }
  }
}